#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>

// LCD Setup - Use the address you found with the I2C scanner
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Change address if needed

// Keypad setup
const byte ROWS = 4;
const byte COLS = 4;

// Define keypad keys
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

// Working pin configuration
byte rowPins[ROWS] = {32, 33, 25, 26};  // Connected to row pinouts of the keypad
byte colPins[COLS] = {27, 14, 12, 13};  // Connected to column pinouts of the keypad

// Create keypad object
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Variables to store input string
String inputStr = "";
const int MAX_INPUT_LENGTH = 16;  // Maximum length of input string (LCD width)

void setup() {
  // Initialize serial for debugging
  Serial.begin(115200);
  
  // Initialize I2C
  Wire.begin();
  
  // Initialize LCD
  lcd.begin();
  lcd.backlight();
  
  // Display welcome message
  lcd.setCursor(0, 0);
  lcd.print("ESP32 Keypad Test");
  lcd.setCursor(0, 1);
  lcd.print("Press any key...");
  
  delay(2000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Input:");
}

void loop() {
  // Get key press
  char key = keypad.getKey();
  
  if (key) {
    Serial.println("Key pressed: " + String(key));
    
    // Handle backspace (using * as backspace)
    if (key == '*' && inputStr.length() > 0) {
      inputStr = inputStr.substring(0, inputStr.length() - 1);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Input:");
      lcd.setCursor(0, 1);
      lcd.print(inputStr);
    }
    // Handle clear (using # as clear)
    else if (key == '#') {
      inputStr = "";
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Input:");
    }
    // Add key to input string if not control characters and not exceeding max length
    else if (key != '*' && key != '#' && inputStr.length() < MAX_INPUT_LENGTH) {
      inputStr += key;
      lcd.setCursor(0, 1);
      lcd.print(inputStr);
    }
  }
}